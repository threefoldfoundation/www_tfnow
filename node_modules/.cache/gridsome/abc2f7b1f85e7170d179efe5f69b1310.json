{"remainingRequest":"/root/tf-now/node_modules/babel-loader/lib/index.js??ref--1-1!/root/tf-now/node_modules/cache-loader/dist/cjs.js??ref--0-0!/root/tf-now/node_modules/vue-loader/lib/index.js??vue-loader-options!/root/tf-now/src/components/ToggleDarkMode.vue?vue&type=script&lang=js&","dependencies":[{"path":"/root/tf-now/src/components/ToggleDarkMode.vue","mtime":1600249310000},{"path":"/root/tf-now/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/root/tf-now/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/root/tf-now/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/root/tf-now/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\nexport var LIGHTS_OUT = 'lights-out';\nexport default {\n  data: function data() {\n    return {\n      isDarkMode: false\n    };\n  },\n  methods: {\n    handleClick: function handleClick() {\n      var hasDarkMode = document.documentElement.hasAttribute(LIGHTS_OUT); // Toggle dark mode on click.\n\n      return this.toggleDarkMode(!hasDarkMode);\n    },\n    toggleDarkMode: function toggleDarkMode(shouldBeDark) {\n      document.documentElement.toggleAttribute(LIGHTS_OUT, shouldBeDark);\n      this.isDarkMode = shouldBeDark;\n      this.writeToStorage(shouldBeDark);\n      return shouldBeDark;\n    },\n    detectPrefered: function detectPrefered() {\n      return window.matchMedia('(prefers-color-scheme: dark)').matches;\n    },\n    hasInStorage: function hasInStorage() {\n      var check = localStorage.getItem(LIGHTS_OUT);\n      return check !== null;\n    },\n    writeToStorage: function writeToStorage(prefersDark) {\n      localStorage.setItem(LIGHTS_OUT, prefersDark ? 'true' : 'false');\n    },\n    getFromStorage: function getFromStorage() {\n      return localStorage.getItem(LIGHTS_OUT) === 'true' ? true : false;\n    }\n  },\n  mounted: function mounted() {\n    if (this.hasInStorage()) {\n      this.toggleDarkMode(this.getFromStorage());\n    } else if (process.isClient && window.matchMedia) {\n      this.toggleDarkMode(this.detectPrefered());\n    }\n  }\n};",{"version":3,"sources":["ToggleDarkMode.vue"],"names":[],"mappings":";;;;;;AAOA,OAAA,IAAA,UAAA,GAAA,YAAA;AAEA,eAAA;AACA,EAAA,IADA,kBACA;AACA,WAAA;AACA,MAAA,UAAA,EAAA;AADA,KAAA;AAGA,GALA;AAOA,EAAA,OAAA,EAAA;AACA,IAAA,WADA,yBACA;AACA,UAAA,WAAA,GAAA,QAAA,CAAA,eAAA,CAAA,YAAA,CAAA,UAAA,CAAA,CADA,CAGA;;AACA,aAAA,KAAA,cAAA,CAAA,CAAA,WAAA,CAAA;AACA,KANA;AAQA,IAAA,cARA,0BAQA,YARA,EAQA;AACA,MAAA,QAAA,CAAA,eAAA,CAAA,eAAA,CAAA,UAAA,EAAA,YAAA;AAEA,WAAA,UAAA,GAAA,YAAA;AAEA,WAAA,cAAA,CAAA,YAAA;AAEA,aAAA,YAAA;AACA,KAhBA;AAkBA,IAAA,cAlBA,4BAkBA;AACA,aAAA,MAAA,CAAA,UAAA,CAAA,8BAAA,EAAA,OAAA;AACA,KApBA;AAsBA,IAAA,YAtBA,0BAsBA;AACA,UAAA,KAAA,GAAA,YAAA,CAAA,OAAA,CAAA,UAAA,CAAA;AAEA,aAAA,KAAA,KAAA,IAAA;AACA,KA1BA;AA4BA,IAAA,cA5BA,0BA4BA,WA5BA,EA4BA;AACA,MAAA,YAAA,CAAA,OAAA,CAAA,UAAA,EAAA,WAAA,GAAA,MAAA,GAAA,OAAA;AACA,KA9BA;AAgCA,IAAA,cAhCA,4BAgCA;AACA,aAAA,YAAA,CAAA,OAAA,CAAA,UAAA,MAAA,MAAA,GAAA,IAAA,GAAA,KAAA;AACA;AAlCA,GAPA;AA4CA,EAAA,OA5CA,qBA4CA;AACA,QAAA,KAAA,YAAA,EAAA,EAAA;AACA,WAAA,cAAA,CACA,KAAA,cAAA,EADA;AAGA,KAJA,MAIA,IAAA,OAAA,CAAA,QAAA,IAAA,MAAA,CAAA,UAAA,EAAA;AACA,WAAA,cAAA,CACA,KAAA,cAAA,EADA;AAGA;AACA;AAtDA,CAAA","sourcesContent":["<template>\r\n  <button @click=\"handleClick\" aria-label=\"Toggle Darkmode\" title=\"Toggle Darkmode\">\r\n    <slot :dark=\"isDarkMode\" />\r\n  </button>\r\n</template>\r\n\r\n<script>\r\nexport const LIGHTS_OUT = 'lights-out';\r\n\r\nexport default {\r\n  data() {\r\n    return {\r\n      isDarkMode: false\r\n    }\r\n  },\r\n\r\n  methods: {\r\n    handleClick() {\r\n      const hasDarkMode = document.documentElement.hasAttribute(LIGHTS_OUT);\r\n\r\n      // Toggle dark mode on click.\r\n      return this.toggleDarkMode(! hasDarkMode);\r\n    },\r\n\r\n    toggleDarkMode(shouldBeDark) {\r\n      document.documentElement.toggleAttribute(LIGHTS_OUT, shouldBeDark);\r\n\r\n      this.isDarkMode = shouldBeDark;\r\n\r\n      this.writeToStorage(shouldBeDark);\r\n\r\n      return shouldBeDark;\r\n    },\r\n\r\n    detectPrefered() {\r\n      return window.matchMedia('(prefers-color-scheme: dark)').matches;\r\n    },\r\n\r\n    hasInStorage() {\r\n      const check = localStorage.getItem(LIGHTS_OUT);\r\n\r\n      return check !== null;\r\n    },\r\n\r\n    writeToStorage(prefersDark) {\r\n      localStorage.setItem(LIGHTS_OUT, prefersDark ? 'true' : 'false');\r\n    },\r\n\r\n    getFromStorage() {\r\n      return localStorage.getItem(LIGHTS_OUT) === 'true' ? true : false;\r\n    }\r\n  },\r\n\r\n  mounted() {\r\n    if (this.hasInStorage()) {\r\n      this.toggleDarkMode(\r\n        this.getFromStorage()\r\n      );\r\n    } else if (process.isClient && window.matchMedia) {\r\n      this.toggleDarkMode(\r\n        this.detectPrefered()\r\n      );\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n<style>\r\n</style>"],"sourceRoot":"src/components"}]}